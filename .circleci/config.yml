defaults: &defaults
  working_directory: /tmp/workspace
  docker:
    - image: circleci/golang:1.12.9

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: docker info
      - run: go version
      - run:
          name: "Build container"
          command: |
            docker build -t tinyhttp:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar tinyhttp:latest
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
         name: "Test container"
         command: |
          docker run -d --rm --name "test" tinyhttp:latest && \
          curl http://127.0.0.1:8000
          docker logs test
          docker stop test

    e2etests:
      <<: *defaults
      steps:
        - setup_remote_docker
        - run:
           name: "Test container"
           command: |
            docker run -d --rm --name "test" tinyhttp:latest && \
            curl --request POST \
            --url http://127.0.0.1:8000graphql \
            --header 'authorization: Bearer ' \
            --header 'content-type: application/json' \
            --cookie REVEL_FLASH= \
            --data '{"query":"mutation logIn($credentials: LogInput) {\n  logIn(credentials: $credentials) {\n    userId\n    token\n  }\n}\n","variables":{"credentials":{"email":"theuser","password":"thepassword"}}}'
            docker logs test
            docker stop test

  publish:
    <<: *defaults
    steps:
      - setup_remote_docker
      - run:
         name: "Publish Image"
         command: |
          docker tag tinyhttp:latest nickuk2/tinyhttp:latest
          docker push nickuk2/tinyhttp:latest

  dev-deploy:
    <<: *defaults
    steps:
      - run: echo do something with dev

  stg-deploy:
    <<: *defaults
    steps:
      - run: echo do something with staging

  prod-deploy:
    <<: *defaults
    steps:
      - run: echo do something with production

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build:
        # filters:
        #   branches:
        #     only: dev
      - test:
          requires: 
           - build
      - publish:
          requires: 
           - test
      - dev-deploy:
          type: approval
          requires: 
           - publish
      - e2etests:
          requires:
           - dev-deploy
      - stg-deploy:
          type: approval
          requires: 
           - e2etests
          # filters:
          #   branches:
          #    only: master
      - prod-deploy:
          type: approval
          requires: 
           - stg-deploy
          #  filters:
          #   branches:
          #    only: master
